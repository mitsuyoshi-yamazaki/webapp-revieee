AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: revieee development settings
Resources:

# VPC
## VPC Base
  RevieeeVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
      Tags:
       - Key: Name
         Value: RevieeeDevelopmentVPC
## Revieee Internet Gateway
  RevieeeIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: RevieeeIGW
## Attach Internet Gateway To VPC
  AttachIGWtoVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref RevieeeIGW
      VpcId: !Ref RevieeeVPC

# Subnet
## Webhook Server
### Subnet 1a
  RevieeeAppSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RevieeeVPC
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 10.1.192.0/26
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: RevieeeAppSubnet1a
### Subnet 1c
  RevieeeAppSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RevieeeVPC
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 10.1.192.64/26
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: RevieeeAppSubnet1c
## ECS Container Instance
### Subnet1a
  ContainerInstanceSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RevieeeVPC
      AvailabilityZone: ap-northeast-1a
      CidrBlock: 10.1.194.0/26
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ContainerInstanceSubnet1a
### Subnet1c
  ContainerInstanceSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RevieeeVPC
      AvailabilityZone: ap-northeast-1c
      CidrBlock: 10.1.194.64/26
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ContainerInstanceSubnet1c
# Route Table
## Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref RevieeeVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
  RouteAddInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref RevieeeIGW
      RouteTableId: !Ref PublicRouteTable
### App Server Route Table Association
  AssociateAppSubnet1aToPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref RevieeeAppSubnet1a
  AssociateAppSubnet1cToPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref RevieeeAppSubnet1c
### Container Instance Route Table Association
  AssociateContainerInstanceSubnet1aToPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref ContainerInstanceSubnet1a
  AssociateContainerInstanceSubnet1cToPublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref ContainerInstanceSubnet1c

# SecurityGroup
## AppServer Security Group
  RevieeeAppServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref RevieeeVPC
      GroupDescription: "Security Group for Revieee App Server"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref AcceptCidrIp
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref AcceptCidrIp
      - IpProtocol: tcp
        FromPort: !Ref SSHPort
        ToPort: !Ref SSHPort
        CidrIp: !Ref AcceptCidrIp
      GroupName: !Join [ "-", [ !Ref "AWS::StackName", RevieeeAppServerSecurityGroup ] ]
      Tags:
        - Key: Name
          Value: RevieeeAppServerSecurityGroup

## ECS Container Instance
  ContainerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref RevieeeVPC
      GroupDescription: "Security Group for Revieee Container Instance"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 32768
        ToPort: 61000
        SourceSecurityGroupId: !Ref RevieeeAppServerSecurityGroup
      - IpProtocol: tcp
        FromPort: !Ref SSHPort
        ToPort: !Ref SSHPort
        CidrIp: !Ref AcceptCidrIp
      GroupName: !Join [ "-", [ !Ref "AWS::StackName", RevieeeContainerInstanceSecurityGroup ] ]
      Tags:
        - Key: Name
          Value: RevieeeContainerInstanceSecurityGroup

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join [ "-", [ !Ref "AWS::StackName", RevieeeCluster ] ]

#------ SpotFleet ---------#
  EcsSpotFleetRequest:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !GetAtt FleetIAMRole.Arn
        SpotPrice: !Ref SpotPrice
        TargetCapacity: !Ref TargetCapacity
        LaunchSpecifications:
        - EbsOptimized: 'false'
          InstanceType: !Ref MainContainerInstanceType
          ImageId: !Ref ContainerInstanceImageId
          WeightedCapacity: '4'
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
        - EbsOptimizes: 'false'
          InstanceType: !Ref SubContainerInstanceType
          ImageId: !Ref ContainerInstanceImageId
          SubnetId:
            Ref: ContainerInstanceSubnet1c
          WeightedCapacity: '1'
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

  FleetIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole'
      RoleName: !Join [ "-", [ !Ref "AWS::StackName", FleetIAMRole ] ]

#------- SpotFleet/ --------#

  EndpointInstanceIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: !Join [ "-", [ !Ref "AWS::StackName", RevieeeEndpointInstanceIamRole ] ]

  EndpointInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EndpointInstanceIamRole

  EndpointInstance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref EndpointInstanceProfile
      ImageId: ami-923d12f5
      InstanceType: t2.micro
      KeyName: !If [ SSHKeySpecified, !Ref SSHKey, !Ref "AWS::NoValue" ]
      SecurityGroupIds:
        - !GetAtt RevieeeAppServerSecurityGroup.GroupId
      SubnetId: !Ref RevieeeAppSubnet1c
      Tags:
        - Key: Name
          Value: RevieeeEndpointInstance
      # UserData: [TODO] run itamae

  # ------ API Gateway ------

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "states:*"
                Resource: "*"
          PolicyName: !Join [ "-", [ !Ref "AWS::StackName", AWSStepFunctionsFullAccess ] ]
      RoleName: !Join [ "-", [ !Ref "AWS::StackName", RevieeeApiRole ] ]

  RevieeeApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join [ "-", [ !Ref "AWS::StackName", RevieeeApi ] ]
  RevieeeApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RevieeeApi
      ParentId: !GetAtt RevieeeApi.RootResourceId
      PathPart: "stage"
  RevieeeApiCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RevieeeApi
      ResourceId: !Ref RevieeeApiResource
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: !Sub
            - |-
              {
                "input": "{}",
                "name": "Hello",
                "stateMachineArn": "${stateMachineArn}"
              }
            - { stateMachineArn: !Ref StateMachineCreate }
        Type: AWS
        Uri: !Join [ "", [ "arn:aws:apigateway:", !Ref "AWS::Region", ":states:action/StartExecution" ] ]
        Credentials: !GetAtt ApiRole.Arn
      MethodResponses:
        - StatusCode: 200
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: RevieeeApiCreateMethod
    Properties:
      RestApiId: !Ref RevieeeApi
      StageName: pub

  # ------ /API Gateway ------

  # ------ StepFunctions ------

  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - states.ap-northeast-1.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "lambda:InvokeFunction"
                Resource: "*"
          PolicyName: !Join [ "-", [ !Ref "AWS::StackName", StatesExecutionPolicy ] ]
      RoleName: !Join [ "-", [ !Ref "AWS::StackName", RevieeeStateMachineRole ] ]

  StateMachineCreate:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub
        - |-
          {
            "Comment": "Run ECS Task",
            "StartAt": "RunEcsTask",
            "States": {
              "RunEcsTask": {
                "Type": "Task",
                "Resource": "${taskArn}",
                "End": true
              }
            }
          }
        - { "taskArn": !Ref RunEcsTaskFunction }
      RoleArn: !GetAtt StateMachineRole.Arn

  # ------ /StepFunctions ------

  # ------ Lambda ------

  RunEcsTaskFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "ecs:RunTask"
                Resource: "*"
          PolicyName: !Join [ "-", [ !Ref "AWS::StackName", RunEcsTaskFunctionPolicy ] ]
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      RoleName: !Join [ "-", [ !Ref "AWS::StackName", RevieeeRunEcsTaskFunctionRole ] ]

  RunEcsTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: ./functions/RunEcsTask/built/
      Role: !GetAtt RunEcsTaskFunctionRole.Arn

  # ------ /Lambda ------

  # ----- RDS -----
  RevieeeDB:
    Type: AWS::RDS::DB::Instance
    Properites:
      DBSecurityGroups:
        - Ref: RevieeeAppServerSecurityGroup
      AllocatedStorage: '1'
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      MasterUsername: !Ref DBUserName
      MasterUserPassword: !Ref DBPassword
    DeletionPolicy: Snapshot

  # ----- /RDS ----


# Parameter
Parameters:
  SSHPort:
    Default: 22
    Type: Number
  SSHKey:
    Default: ""
    Type: String
  AcceptCidrIp:
    Type: String
# Parameters for SpotFleetRequest
  SpotPrice:
    Default: 0.139
    Type: Number
  TargetCapacity:
    Default: 2
    Type: Number
  MainContainerInstanceType:
    Default: 'm4.large'
    Type: String
  SubContainerInstanceType:
    Default: 'm3.large'
    Type: String
  ContainerInstanceImageId:
    Default: 'ami-3a000e5d'
    Type: 'String'
  DBUserName:
    Type: String
  DBPassword:
    Type: String

Conditions:
  SSHKeySpecified:
    !Not [ !Equals [ !Ref SSHKey, "" ] ]
  DBUserNameSpecified:
    !Not [ !Equals [ !Ref DBUserName, ""]]
  DBPasswordSpecified:
    !Not [ !Equals [ !Ref DBPassword, ""]]

Outputs:
  EcsClusterName:
    Value: !Ref EcsCluster
